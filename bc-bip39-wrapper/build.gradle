apply plugin: 'com.android.library'
apply from: '../configuration.gradle'
apply plugin: 'com.kezong.fat-aar'

def ext = project.ext
def config = ext.configuration
def project_publication = ext.publicationProperties(project.name)

def fatAar = false

buildscript {
    apply from: '../dependencies.gradle'
    addRepos(repositories)
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    dependencies {
        classpath deps.android_plugin
        classpath deps.android_maven_plugin
        classpath deps.bintray_plugin
        classpath deps.fat_aar
    }
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

android {
    compileSdkVersion 27

    compileOptions {
        sourceCompatibility config.SOURCE_COMPATIBILITY
        targetCompatibility config.TARGET_COMPATIBILITY
    }

    lintOptions {
        abortOnError false
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName project_publication.VERSION
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

    packagingOptions {
        exclude 'lib/**/libbip39jni.so'
    }
}

apply from: '../publication_android.gradle'

task unzipAAR(type: Copy) {
    def aar = file("${buildDir}/outputs/aar/" + project_publication.ARTIFACT_ID + "-" + project_publication.VERSION + ".aar")
    from zipTree(aar)
    into "${buildDir}/outputs/aar/unzip"
}

task copyNativeLib(type: Copy) {
    from "${projectDir}/jni/libbip39jni.dylib", "${projectDir}/jni/libbip39jni.so", "${buildDir}/intermediates/cmake/release/obj"
    into "${buildDir}/libs/native-lib/lib"
}

task buildNativeJar(type: Zip, dependsOn: ['copyNativeLib']) {
   
    destinationDir file("$buildDir/libs/native-jar")
    baseName 'bc-bip39'
    version ''
    extension 'jar'
    from("${buildDir}/libs/native-lib/lib") {
        include '**/*.so*', '*.dylib', '*.dll', '*.so', "*.jnilib"
    }
    into "lib"
    doLast {
        copy {
            from "$buildDir/libs/native-jar"
            into "lib"
        }
    }
}

task libraryJar(type: Zip, dependsOn: ['unzipAAR', 'buildNativeJar']) {
    destinationDir file("$buildDir/libs/lib-jar")
    baseName project_publication.ARTIFACT_ID
    extension 'jar'
    from zipTree(file("${buildDir}/outputs/aar/unzip/classes.jar")), "${buildDir}/libs/native-lib"
}

task('generateSWIGsource') {
    inputs.dir fileTree(dir: "${projectDir}/jni")
    outputs.dir("${projectDir}/src/main/java/com/bitmark/sdk/bcbip39wrapper/lib")
    outputs.file "${projectDir}/jni/bip39_wrap.c"
    doFirst {
        exec {
            workingDir "${projectDir}/jni"
            commandLine 'swig', '-I../bc-bip39/src', '-java', '-package', 'com.bitmark.sdk.bcbip39wrapper.bip39', '-outdir', '../src/main/java/com/bitmark/sdk/bcbip39wrapper/bip39', 'bip39.i'
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar, libraryJar
}

ext.additionalArtifact = libraryJar

dependencies {

    if (fatAar) {
        embed fileTree(include: '*.jar', dir: 'lib')
        embed deps.bouncycastle

        compileOnly fileTree(include: '*.jar', dir: 'lib')
        compileOnly deps.bouncycastle
    } else {
        implementation fileTree(include: '*.jar', dir: 'lib')
        implementation deps.bouncycastle
    }

    testImplementation deps.junit_jupiter.api
    testImplementation deps.junit_jupiter.params
    testImplementation deps.junit_platform.suite_api
    testImplementation deps.junit_platform.runner
    testImplementation deps.junit_jupiter.engine

    androidTestImplementation deps.junit
    androidTestImplementation deps.android_test_runner
    androidTestImplementation deps.java_stream
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
