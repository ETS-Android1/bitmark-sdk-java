apply plugin: 'java-library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

buildscript {
    apply from: 'configuration.gradle'
    apply from: 'dependencies.gradle'
    addRepos(repositories)
    dependencies {
        classpath deps.maven_plugin
        classpath deps.bintray_plugin
    }
}

def ext = project.ext
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group = ext.GROUP_ID
version = ext.VERSION

sourceCompatibility = ext.SOURCE_COMPATIBILITY
targetCompatibility = ext.TARGET_COMPATIBILITY

allprojects {
    addRepos(repositories)
}

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    baseName ext.JAR_NAME
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

jar {
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        def manifestClasspath = configurations.runtime.collect { it.name }
        manifestClasspath = manifestClasspath.unique().join(" ")
        manifest {
            attributes 'Name': ext.LIB_NAME
            attributes 'Specification-Title': ext.LIB_DES
            attributes 'Specification-Version': ext.VERSION
            attributes 'Specification-Vendor': ext.LIB_VENDOR
            attributes 'Implementation-Version': ext.VERSION
            attributes 'Implementation-Vendor': ext.LIB_VENDOR
            attributes 'Class-Path': manifestClasspath
        }
    }
    dependsOn ':cryptography:jar', ':api-service:jar'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    baseName = ext.JAR_NAME
    version = ext.VERSION
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'jar'
            groupId ext.GROUP_ID
            artifactId ext.ARTIFACT_ID

            name properties.getProperty("lib.name")
            description properties.getProperty("lib.des")
            url properties.getProperty("lib.siteurl")

            licenses {
                license {
                    name properties.getProperty("license.name")
                    url properties.getProperty("license.url")
                }
            }
            developers {
                developer {
                    id properties.getProperty("dev.id")
                    name properties.getProperty("dev.name")
                    email properties.getProperty("dev.email")
                }
            }
            scm {
                connection properties.getProperty("lib.giturl")
                developerConnection properties.getProperty("lib.giturl")
                url properties.getProperty("lib.siteurl")
            }
        }
    }
}

bintray {

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    def license = [properties.getProperty("license.all")]

    configurations = ['archives']
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = properties.getProperty("bintray.name")
        desc = properties.getProperty("lib.des")
        websiteUrl = properties.getProperty("lib.siteurl")
        vcsUrl = properties.getProperty("lib.giturl")
        licenses = license
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = properties.getProperty("lib.des")
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}

dependencies {
    compile project(':cryptography')
    compile project(':api-service')

    implementation deps.bouncycastle

    testImplementation deps.junit_jupiter.api
    testImplementation deps.junit_jupiter.params
    testImplementation deps.junit_platform.suite_api
    testImplementation deps.junit_platform.runner
    testImplementation deps.mockito

    testRuntime deps.junit_jupiter.engine
}
