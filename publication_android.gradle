apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def ext = project.ext
def root_publication = ext.publication
def project_publication = ext.publicationProperties(project.name)
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group = project_publication.GROUP_ID
version = project_publication.VERSION

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar, sourcesJar
}

install {

    repositories.mavenInstaller {
        pom.project {
            packaging 'jar'
            groupId project_publication.GROUP_ID
            artifactId project_publication.ARTIFACT_ID

            name project_publication.LIB_NAME
            description project_publication.LIB_DES
            url project_publication.LIB_SITE_URL

            licenses {
                license {
                    name root_publication.LICENSE_NAME
                    url root_publication.LICENSE_URL
                }
            }
            developers {
                developer {
                    id root_publication.DEV_ID
                    name root_publication.DEV_NAME
                    email root_publication.DEV_EMAIL
                }
            }
            scm {
                connection project_publication.LIB_GIT_URL
                developerConnection project_publication.LIB_GIT_URL
                url project_publication.LIB_SITE_URL
            }
        }
    }
}

bintrayUpload.dependsOn(install)

bintray {

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = ext.publicationPackageName(project.name)
        desc = project_publication.LIB_DES
        websiteUrl = project_publication.LIB_SITE_URL
        vcsUrl = project_publication.LIB_GIT_URL
        licenses = root_publication.LICENSE_ALL
        dryRun = false
        publish = true
        override = true
        publicDownloadNumbers = true
        version {
            desc = project_publication.LIB_DES
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}

task sonatypeUpload(dependsOn : ['bundleReleaseAar', 'publish'])

project.afterEvaluate {
    publishing {

        publications {
            mavenAndroid(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                artifact bundleReleaseAar
                
                if (project.hasProperty('additionalArtifact')) artifact project.additionalArtifact

                pom {
                    groupId project_publication.GROUP_ID
                    artifactId project_publication.ARTIFACT_ID

                    name = project_publication.LIB_NAME
                    description = project_publication.LIB_DES
                    url = project_publication.LIB_SITE_URL

                    licenses {
                        license {
                            name = root_publication.LICENSE_NAME
                            url = root_publication.LICENSE_URL
                        }
                    }
                    developers {
                        developer {
                            id = root_publication.DEV_ID
                            name = root_publication.DEV_NAME
                            email = root_publication.DEV_EMAIL
                        }
                    }
                    scm {
                        connection = project_publication.LIB_GIT_URL
                        developerConnection = project_publication.LIB_GIT_URL
                        url = project_publication.LIB_SITE_URL
                    }
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/content/repositories/releases/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username properties.getProperty('oss.sonatype.username')
                    password properties.getProperty('oss.sonatype.password')
                }
            }
        }
    }
}